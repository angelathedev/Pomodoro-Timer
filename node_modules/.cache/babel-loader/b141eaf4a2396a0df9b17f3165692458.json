{"ast":null,"code":"var _jsxFileName = \"/Users/ladybyrd/Thinkful/pomodoro/Project_Pomodoro_Timer_Qualified_1/src/pomodoro/DisplayProgress.js\";\nimport React from \"react\";\nimport classNames from \"../utils/class-names\";\nimport { secondsToDuration, minutesToDuration } from \"../utils/duration\";\n\nfunction DisplayProgress({\n  timerSettings\n}) {\n  const {\n    currentlyActive,\n    focusTime,\n    breakTime,\n    focusSeconds,\n    breakSeconds,\n    onBreak,\n    isTimerRunning\n  } = timerSettings;\n  const currentValue = !onBreak ? (focusTime * 60 - focusSeconds) / (focusTime * 60) * 100 : (breakTime * 60 - breakSeconds) / (breakTime * 60) * 100;\n  return /*#__PURE__*/React.createElement(\"div\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 20,\n      columnNumber: 5\n    }\n  }, /*#__PURE__*/React.createElement(\"div\", {\n    className: \"row mb-2\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 21,\n      columnNumber: 5\n    }\n  }, /*#__PURE__*/React.createElement(\"div\", {\n    className: \"col\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 22,\n      columnNumber: 7\n    }\n  },\n  /* TODO: Update message below to include current session (Focusing or On Break) and total duration */\n  !onBreak ? /*#__PURE__*/React.createElement(\"h2\", {\n    \"data-testid\": \"session-title\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 24,\n      columnNumber: 21\n    }\n  }, \"Focusing for \", minutesToDuration(focusTime), \" minutes\") : /*#__PURE__*/React.createElement(\"h2\", {\n    \"data-testid\": \"session-title\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 25,\n      columnNumber: 10\n    }\n  }, \" On Break \", minutesToDuration(breakTime)),\n  /* TODO: Update message below to include time remaining in the current session */\n  !onBreak ? /*#__PURE__*/React.createElement(\"p\", {\n    className: \"lead\",\n    \"data-testid\": \"session-sub-title\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 28,\n      columnNumber: 21\n    }\n  }, secondsToDuration(focusSeconds), \" remaining\") : /*#__PURE__*/React.createElement(\"p\", {\n    className: \"lead\",\n    \"data-testid\": \"session-sub-title\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 29,\n      columnNumber: 17\n    }\n  }, secondsToDuration(breakSeconds)))), /*#__PURE__*/React.createElement(\"div\", {\n    className: \"row mb-2\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 34,\n      columnNumber: 5\n    }\n  }, /*#__PURE__*/React.createElement(\"div\", {\n    className: \"col\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 35,\n      columnNumber: 7\n    }\n  }, /*#__PURE__*/React.createElement(\"div\", {\n    className: \"progress\",\n    style: {\n      height: \"20px\"\n    },\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 36,\n      columnNumber: 9\n    }\n  }, /*#__PURE__*/React.createElement(\"div\", {\n    className: \"progress-bar\",\n    role: \"progressbar\",\n    \"aria-valuemin\": \"0\",\n    \"aria-valuemax\": \"100\",\n    \"aria-valuenow\": currentValue // TODO: Increase aria-valuenow as elapsed time increases\n    ,\n    style: {\n      width: `${currentValue}`\n    } // TODO: Increase width % as elapsed time increases\n    ,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 37,\n      columnNumber: 11\n    }\n  })))));\n}\n\nexport default DisplayProgress;","map":{"version":3,"sources":["/Users/ladybyrd/Thinkful/pomodoro/Project_Pomodoro_Timer_Qualified_1/src/pomodoro/DisplayProgress.js"],"names":["React","classNames","secondsToDuration","minutesToDuration","DisplayProgress","timerSettings","currentlyActive","focusTime","breakTime","focusSeconds","breakSeconds","onBreak","isTimerRunning","currentValue","height","width"],"mappings":";AAAA,OAAOA,KAAP,MAAkB,OAAlB;AACA,OAAOC,UAAP,MAAuB,sBAAvB;AACA,SAASC,iBAAT,EAA4BC,iBAA5B,QAAqD,mBAArD;;AAEA,SAASC,eAAT,CAAyB;AAACC,EAAAA;AAAD,CAAzB,EAAyC;AACzC,QAAM;AACEC,IAAAA,eADF;AAEEC,IAAAA,SAFF;AAGEC,IAAAA,SAHF;AAIEC,IAAAA,YAJF;AAKEC,IAAAA,YALF;AAMEC,IAAAA,OANF;AAOEC,IAAAA;AAPF,MAQIP,aARV;AAUE,QAAMQ,YAAY,GAAG,CAACF,OAAD,GAAY,CAACJ,SAAS,GAAG,EAAZ,GAAiBE,YAAlB,KAAmCF,SAAS,GAAG,EAA/C,CAAD,GAAuD,GAAlE,GAA0E,CAACC,SAAS,GAAG,EAAZ,GAAiBE,YAAlB,KAAmCF,SAAS,GAAG,EAA/C,CAAD,GAAuD,GAArJ;AAEF,sBAEI;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,kBACA;AAAK,IAAA,SAAS,EAAC,UAAf;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,kBACE;AAAK,IAAA,SAAS,EAAC,KAAf;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACG;AACD,GAACG,OAAD,gBAAY;AAAI,mBAAY,eAAhB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,sBAA8CR,iBAAiB,CAACI,SAAD,CAA/D,aAAZ,gBACC;AAAI,mBAAY,eAAhB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,mBAA2CJ,iBAAiB,CAACK,SAAD,CAA5D,CAHH;AAKG;AACD,GAACG,OAAD,gBAAY;AAAG,IAAA,SAAS,EAAC,MAAb;AAAoB,mBAAY,mBAAhC;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KAAqDT,iBAAiB,CAACO,YAAD,CAAtE,eAAZ,gBACQ;AAAG,IAAA,SAAS,EAAC,MAAb;AAAoB,mBAAY,mBAAhC;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KAAqDP,iBAAiB,CAACQ,YAAD,CAAtE,CAPV,CADF,CADA,eAcA;AAAK,IAAA,SAAS,EAAC,UAAf;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,kBACE;AAAK,IAAA,SAAS,EAAC,KAAf;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,kBACE;AAAK,IAAA,SAAS,EAAC,UAAf;AAA0B,IAAA,KAAK,EAAE;AAAEI,MAAAA,MAAM,EAAE;AAAV,KAAjC;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,kBACE;AACE,IAAA,SAAS,EAAC,cADZ;AAEE,IAAA,IAAI,EAAC,aAFP;AAGE,qBAAc,GAHhB;AAIE,qBAAc,KAJhB;AAKE,qBAAeD,YALjB,CAK+B;AAL/B;AAME,IAAA,KAAK,EAAE;AAAEE,MAAAA,KAAK,EAAG,GAAEF,YAAa;AAAzB,KANT,CAMuC;AANvC;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,IADF,CADF,CADF,CAdA,CAFJ;AAmCC;;AAED,eAAeT,eAAf","sourcesContent":["import React from \"react\";\nimport classNames from \"../utils/class-names\";\nimport { secondsToDuration, minutesToDuration } from \"../utils/duration\";\n\nfunction DisplayProgress({timerSettings}){\nconst {\n        currentlyActive,\n        focusTime,\n        breakTime,\n        focusSeconds,\n        breakSeconds,\n        onBreak,\n        isTimerRunning\n      } = timerSettings;\n\n  const currentValue = !onBreak ? ((focusTime * 60 - focusSeconds) / (focusTime * 60)) * 100  : ((breakTime * 60 - breakSeconds) / (breakTime * 60)) * 100;\n\nreturn(\n    (\n    <div>\n    <div className=\"row mb-2\">\n      <div className=\"col\">\n        {/* TODO: Update message below to include current session (Focusing or On Break) and total duration */\n        !onBreak ? (<h2 data-testid=\"session-title\">Focusing for {minutesToDuration(focusTime)} minutes</h2>) : \n        (<h2 data-testid=\"session-title\"> On Break {minutesToDuration(breakTime)}</h2>)}\n\n        {/* TODO: Update message below to include time remaining in the current session */\n        !onBreak ? (<p className=\"lead\" data-testid=\"session-sub-title\">{secondsToDuration(focusSeconds)} remaining\n        </p>) : <p className=\"lead\" data-testid=\"session-sub-title\">{secondsToDuration(breakSeconds)}</p>}\n\n        \n      </div>\n    </div>\n    <div className=\"row mb-2\">\n      <div className=\"col\">\n        <div className=\"progress\" style={{ height: \"20px\" }}>\n          <div\n            className=\"progress-bar\"\n            role=\"progressbar\"\n            aria-valuemin=\"0\"\n            aria-valuemax=\"100\"\n            aria-valuenow={currentValue} // TODO: Increase aria-valuenow as elapsed time increases\n            style={{ width: `${currentValue}` }} // TODO: Increase width % as elapsed time increases\n          />\n        </div>\n      </div>\n    </div>\n  </div>\n    )\n\n)\n\n}\n\nexport default DisplayProgress;"]},"metadata":{},"sourceType":"module"}