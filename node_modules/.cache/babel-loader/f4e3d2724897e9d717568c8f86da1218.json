{"ast":null,"code":"var _jsxFileName = \"/Users/ladybyrd/Thinkful/pomodoro/Project_Pomodoro_Timer_Qualified_1/src/pomodoro/Pomodoro.js\";\nimport React, { useState } from \"react\";\nimport useInterval from \"../utils/useInterval\";\nimport Buttons from \"./Buttons\";\nimport DisplayProgress from \"./DisplayProgress\";\nimport Timer from \"./Timer\";\n\nfunction Pomodoro() {\n  //Initial timer settings\n  const initialTimerSettings = {\n    focusSeconds: 1500,\n    breakSeconds: 300,\n    focusTime: 25,\n    breakTime: 5,\n    currentlyActive: false,\n    onBreak: false,\n    isTimerRunning: false\n  };\n  const [timerSettings, setTimerSettings] = useState({ ...initialTimerSettings\n  }); //Initialize the initial timer settings\n\n  const {\n    focusSeconds,\n    breakSeconds,\n    focusTime,\n    breakTime,\n    isTimerRunning,\n    onBreak\n  } = timerSettings;\n  useInterval(() => {\n    const timerRunning = !onBreak ? focusSeconds : breakSeconds; //Checks to see if the timer has reached 0, resets the timer, and plays audio for breakTime\n\n    if (timerRunning === 0) {\n      setTimerSettings({ ...timerSettings,\n        focusSeconds: focusTime * 60,\n        breakSeconds: breakTime * 60,\n        onBreak: !onBreak\n      });\n      new Audio(`https://bigsoundbank.com/UPLOAD/mp3/1482.mp3`).play();\n    } //Counts down the timer in seconds by 1 for focus time\n    else if (timerRunning > 0 && !onBreak) {\n        setTimerSettings({ ...timerSettings,\n          focusSeconds: focusSeconds - 1\n        });\n      } //Counts down the timer in seconds by 1 for break time\n      else if (timerRunning > 0 && onBreak) {\n          setTimerSettings({ ...timerSettings,\n            breakSeconds: breakSeconds - 1\n          });\n        }\n  }, isTimerRunning ? 1000 : null);\n  return /*#__PURE__*/React.createElement(\"div\", {\n    className: \"pomodoro\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 64,\n      columnNumber: 5\n    }\n  }, /*#__PURE__*/React.createElement(DisplayProgress, {\n    timerSettings: timerSettings,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 65,\n      columnNumber: 7\n    }\n  }), /*#__PURE__*/React.createElement(Timer, {\n    timerSettings: timerSettings,\n    setTimerSettings: setTimerSettings,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 67,\n      columnNumber: 7\n    }\n  }), /*#__PURE__*/React.createElement(Buttons, {\n    timerSettings: timerSettings,\n    initialTimerSettings: initialTimerSettings,\n    setTimerSettings: setTimerSettings,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 72,\n      columnNumber: 7\n    }\n  }));\n}\n\nexport default Pomodoro;","map":{"version":3,"sources":["/Users/ladybyrd/Thinkful/pomodoro/Project_Pomodoro_Timer_Qualified_1/src/pomodoro/Pomodoro.js"],"names":["React","useState","useInterval","Buttons","DisplayProgress","Timer","Pomodoro","initialTimerSettings","focusSeconds","breakSeconds","focusTime","breakTime","currentlyActive","onBreak","isTimerRunning","timerSettings","setTimerSettings","timerRunning","Audio","play"],"mappings":";AAAA,OAAOA,KAAP,IAAgBC,QAAhB,QAAgC,OAAhC;AACA,OAAOC,WAAP,MAAwB,sBAAxB;AACA,OAAOC,OAAP,MAAoB,WAApB;AACA,OAAOC,eAAP,MAA4B,mBAA5B;AACA,OAAOC,KAAP,MAAkB,SAAlB;;AAEA,SAASC,QAAT,GAAoB;AAClB;AACA,QAAMC,oBAAoB,GAAG;AAC7BC,IAAAA,YAAY,EAAE,IADe;AAE7BC,IAAAA,YAAY,EAAE,GAFe;AAG7BC,IAAAA,SAAS,EAAE,EAHkB;AAI7BC,IAAAA,SAAS,EAAE,CAJkB;AAK7BC,IAAAA,eAAe,EAAE,KALY;AAM7BC,IAAAA,OAAO,EAAE,KANoB;AAO7BC,IAAAA,cAAc,EAAE;AAPa,GAA7B;AAUA,QAAM,CAACC,aAAD,EAAgBC,gBAAhB,IAAoCf,QAAQ,CAAC,EAAC,GAAGM;AAAJ,GAAD,CAAlD,CAZkB,CAclB;;AACA,QAAM;AACJC,IAAAA,YADI;AAEJC,IAAAA,YAFI;AAGJC,IAAAA,SAHI;AAIJC,IAAAA,SAJI;AAKJG,IAAAA,cALI;AAMJD,IAAAA;AANI,MAOFE,aAPJ;AASAb,EAAAA,WAAW,CACT,MAAM;AACN,UAAMe,YAAY,GAAG,CAACJ,OAAD,GAAWL,YAAX,GAA0BC,YAA/C,CADM,CAEN;;AACA,QAAGQ,YAAY,KAAK,CAApB,EAAsB;AACpBD,MAAAA,gBAAgB,CAAC,EACf,GAAGD,aADY;AAEfP,QAAAA,YAAY,EAAEE,SAAS,GAAG,EAFX;AAGfD,QAAAA,YAAY,EAAEE,SAAS,GAAG,EAHX;AAIfE,QAAAA,OAAO,EAAE,CAACA;AAJK,OAAD,CAAhB;AAMA,UAAIK,KAAJ,CAAW,8CAAX,EAA0DC,IAA1D;AACD,KARD,CAUA;AAVA,SAWK,IAAIF,YAAY,GAAG,CAAf,IAAoB,CAACJ,OAAzB,EAAiC;AACpCG,QAAAA,gBAAgB,CAAC,EACf,GAAGD,aADY;AAEfP,UAAAA,YAAY,EAAEA,YAAY,GAAG;AAFd,SAAD,CAAhB;AAID,OALI,CAML;AANK,WAOA,IAAGS,YAAY,GAAG,CAAf,IAAoBJ,OAAvB,EAA+B;AAClCG,UAAAA,gBAAgB,CAAC,EACf,GAAGD,aADY;AAEfN,YAAAA,YAAY,EAAEA,YAAY,GAAG;AAFd,WAAD,CAAhB;AAID;AACA,GA5BQ,EA6BTK,cAAc,GAAG,IAAH,GAAU,IA7Bf,CAAX;AAgCA,sBACE;AAAK,IAAA,SAAS,EAAC,UAAf;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,kBACE,oBAAC,eAAD;AAAiB,IAAA,aAAa,EAAIC,aAAlC;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,IADF,eAGE,oBAAC,KAAD;AACE,IAAA,aAAa,EAAIA,aADnB;AAEE,IAAA,gBAAgB,EAAIC,gBAFtB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,IAHF,eAQE,oBAAC,OAAD;AACE,IAAA,aAAa,EAAID,aADnB;AAEE,IAAA,oBAAoB,EAAIR,oBAF1B;AAGE,IAAA,gBAAgB,EAAIS,gBAHtB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,IARF,CADF;AAgBD;;AAID,eAAeV,QAAf","sourcesContent":["import React, { useState } from \"react\";\nimport useInterval from \"../utils/useInterval\";\nimport Buttons from \"./Buttons\";\nimport DisplayProgress from \"./DisplayProgress\";\nimport Timer from \"./Timer\";\n\nfunction Pomodoro() {\n  //Initial timer settings\n  const initialTimerSettings = {\n  focusSeconds: 1500,\n  breakSeconds: 300, \n  focusTime: 25, \n  breakTime: 5,\n  currentlyActive: false,\n  onBreak: false, \n  isTimerRunning: false,\n  };\n\n  const [timerSettings, setTimerSettings] = useState({...initialTimerSettings});\n\n  //Initialize the initial timer settings\n  const {\n    focusSeconds,\n    breakSeconds,\n    focusTime,\n    breakTime,\n    isTimerRunning,\n    onBreak\n  } = timerSettings;\n\n  useInterval(\n    () => {\n    const timerRunning = !onBreak ? focusSeconds : breakSeconds;\n    //Checks to see if the timer has reached 0, resets the timer, and plays audio for breakTime\n    if(timerRunning === 0){\n      setTimerSettings({\n        ...timerSettings, \n        focusSeconds: focusTime * 60,\n        breakSeconds: breakTime * 60,\n        onBreak: !onBreak\n      });\n      new Audio(`https://bigsoundbank.com/UPLOAD/mp3/1482.mp3`).play();\n    }\n\n    //Counts down the timer in seconds by 1 for focus time\n    else if (timerRunning > 0 && !onBreak){\n      setTimerSettings({\n        ...timerSettings, \n        focusSeconds: focusSeconds - 1\n      })\n    }\n    //Counts down the timer in seconds by 1 for break time\n    else if(timerRunning > 0 && onBreak){\n      setTimerSettings({\n        ...timerSettings, \n        breakSeconds: breakSeconds - 1\n      })\n    }\n    },\n    isTimerRunning ? 1000 : null \n  );\n\n  return (\n    <div className=\"pomodoro\">\n      <DisplayProgress timerSettings = {timerSettings}/>\n\n      <Timer \n        timerSettings = {timerSettings}\n        setTimerSettings = {setTimerSettings}\n      />\n    \n      <Buttons\n        timerSettings = {timerSettings}\n        initialTimerSettings = {initialTimerSettings}\n        setTimerSettings = {setTimerSettings}\n      />\n    </div>\n  );\n}\n\n       \n\nexport default Pomodoro;\n"]},"metadata":{},"sourceType":"module"}